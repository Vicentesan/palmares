/** Automatically generated by @palmares/drizzle-engine on 2024-11-27T23:48:06.278Z */

import * as drzl from '@palmares/drizzle-engine/drizzle';
import * as d from '@palmares/drizzle-engine/pg-core';

export const Company = d.pgTable(
  'companies',
  {
    id: d
      .serial('id')
      .$defaultFn(() => drzl.sql`uuid_generate_v4()`)
      .primaryKey()
      .unique(),
    uuid: d.uuid('uuid').notNull().defaultRandom(),
    name: d.varchar('name', { length: 255 }).notNull(),
    address: d.varchar('address', { length: 255 })
  },
  (table) => ({
    idIdx: d.uniqueIndex('companies_id_idx').on(table.id)
  })
);

export const ProfileType = d.pgTable(
  'profile_type',
  {
    id: d.serial('id').primaryKey().unique(),
    name: d.varchar('name', { length: 255 }).notNull()
  },
  (table) => ({
    idIdx: d.uniqueIndex('profile_type_id_idx').on(table.id)
  })
);

export const userTypeEnum = d.pgEnum('user_type', ['admin', 'user']);

export const User = d.pgTable(
  'users',
  {
    id: d.serial('id').primaryKey().unique(),
    uuid: d.uuid('uuid').notNull(),
    name: d.varchar('name', { length: 280 }),
    age: d.integer('age').notNull(),
    userType: userTypeEnum('user_type').notNull(),
    price: d.numeric('price', { precision: 2, scale: 5 }),
    isActive: d.boolean('is_active').default(true).notNull(),
    updatedAt: d
      .timestamp('updated_at', { precision: 6, withTimezone: true, mode: 'date' })
      .notNull()
      .$onUpdate(() => drzl.sql`now()`),
    createdAt: d.timestamp('created_at', { precision: 6, withTimezone: true, mode: 'date' }).notNull().defaultNow(),
    companyId: d
      .integer('company_id')
      .notNull()
      .references((): d.AnyPgColumn => Company.id),
    profileTypeId: d.integer('profile_type_id').references((): d.AnyPgColumn => ProfileType.id)
  },
  (table) => ({
    idIdx: d.uniqueIndex('users_id_idx').on(table.id),
    nameIdx: d.index('users_name_idx').on(table.name),
    ageIdx: d.index('users_age_idx').on(table.age)
  })
);

export const UserRelations = drzl.relations(User, (args) => ({
  company2: args.one(Company, {
    fields: [User.companyId],
    references: [Company.id]
  }),
  profileType: args.one(ProfileType, {
    fields: [User.profileTypeId],
    references: [ProfileType.id]
  })
}));

export const CompanyRelations = drzl.relations(Company, (args) => ({
  usersOfCompany: args.many(User)
}));

export const ProfileTypeRelations = drzl.relations(ProfileType, (args) => ({
  usersByProfileType: args.many(User)
}));
