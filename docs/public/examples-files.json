{
  "mainpage": {
    "raw": {
      "package.json": "{\n  \"name\": \"mainpage\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"files\": [\n    \"src\",\n    \"manage.ts\",\n    \"_tsconfig.json\"\n  ],\n  \"scripts\": {\n    \"makemigrations\": \"tsx manage.ts makemigrations\",\n    \"migrate\": \"tsx manage.ts migrate\",\n    \"seed\": \"tsx manage.ts seed\",\n    \"test\": \"tsx --experimental-vm-modules manage.ts test\",\n    \"curl\": \"curl http://localhost:3000/users\",\n    \"setup\": \"npm run makemigrations && npm run migrate && npm run seed\",\n    \"dev\": \"tsx manage.ts runserver\"\n  },\n  \"dependencies\": {\n    \"@palmares/console-logging\": \"*\",\n    \"@palmares/core\": \"*\",\n    \"@palmares/databases\": \"*\",\n    \"@palmares/sequelize-engine\": \"*\",\n    \"@palmares/express-adapter\": \"*\",\n    \"@palmares/logging\": \"*\",\n    \"@palmares/node-std\": \"*\",\n    \"@palmares/schemas\": \"*\",\n    \"@palmares/server\": \"*\",\n    \"@palmares/zod-schema\": \"*\",\n    \"@palmares/jest-tests\": \"*\",\n    \"@palmares/tests\": \"*\",\n    \"sqlite3\": \"^5.1.7\"\n  },\n  \"devDependencies\": {\n    \"@types/supertest\": \"^6.0.2\",\n    \"@types/better-sqlite3\": \"^7.6.12\",\n    \"ts-jest-mock-import-meta\": \"^1.2.1\",\n    \"supertest\": \"^7.0.0\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.7.3\"\n  }\n}",
      "_tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src/**/*\", \"manage.ts\", \"migrate.ts\"]\n}\n",
      "manage.ts": "// @ts-nocheck\nimport { Commands } from '@palmares/core';\n\nimport settings from './src/settings';\n\nCommands.handleCommands(settings, process.argv.slice(2));\n",
      "src/settings.ts": "// @ts-nocheck\nimport { ConsoleLogging } from '@palmares/console-logging';\nimport { CoreDomain, defineSettings } from '@palmares/core';\nimport { DatabasesDomain } from '@palmares/databases';\nimport SequelizeEngine from '@palmares/sequelize-engine';\nimport { ExpressServerAdapter } from '@palmares/express-adapter';\nimport { loggingDomain as LoggingDomain } from '@palmares/logging';\nimport { NodeStd } from '@palmares/node-std';\nimport { SchemaDomain } from '@palmares/schemas';\nimport { Response, ServerDomain } from '@palmares/server';\nimport { ZodSchemaAdapter } from '@palmares/zod-schema';\nimport TestsDomain from '@palmares/tests';\nimport JestTestAdapter from '@palmares/jest-tests';\n\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport { join, dirname, resolve } from 'path';\n\nimport mainDomain from './core';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineSettings({\n  basePath: dirname(resolve(__dirname)),\n  settingsLocation: __filename,\n  std: NodeStd,\n  installedDomains: [\n    mainDomain,\n    [\n      LoggingDomain,\n      {\n        logger: ConsoleLogging\n      }\n    ],\n    [\n      CoreDomain,\n      {\n        appName: 'server'\n      }\n    ],\n    // Domain Core, required for palmares to work\n    [\n      ServerDomain,\n      {\n        servers: {\n          default: {\n            server: ExpressServerAdapter,\n            debug: true,\n            port: 3000,\n            validation: {\n              handler: () => {\n                return Response.json({\n                  message: 'query params or url params invalid'\n                });\n              }\n            },\n            handler404: () =>\n              Response.json({\n                status: 404,\n                body: {\n                  message: 'Not found'\n                }\n              }),\n            handler500: async (response: any) => {\n              return response;\n            }\n          }\n        }\n      }\n    ],\n    [\n      SchemaDomain,\n      {\n        schemaAdapter: ZodSchemaAdapter\n      }\n    ],\n    [\n      TestsDomain,\n      {\n        testAdapter: JestTestAdapter.new({\n          config: {\n            extensionsToTreatAsEsm: ['.ts'],\n            transform: {\n              // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n              // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n              '^.+\\\\.ts?$': [\n                'ts-jest',\n                {\n                  tsconfig: join(dirname(resolve(__dirname)), 'tsconfig.json'),\n                  useESM: true,\n                  diagnostics: {\n                    ignoreCodes: [1343]\n                  },\n                  astTransformers: {\n                    before: [\n                      {\n                        path: '../../node_modules/ts-jest-mock-import-meta',\n                        options: {\n                          metaObjectReplacement: {\n                            filename: __filename,\n                            dirname: __dirname,\n                            url: pathToFileURL(__filename)\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        })\n      }\n    ],\n    [\n      DatabasesDomain,\n      {\n        databases: {\n          default: {\n            engine: SequelizeEngine.new({\n              dialect: 'sqlite',\n              storage: './sequelize.sqlite3'\n            })\n          }\n        }\n      }\n    ]\n  ]\n});\n",
      "src/core/database.ts": "// @ts-nocheck\nimport { define, fields, Model, ON_DELETE, InferModel } from '@palmares/databases';\n\nexport class Company extends Model<Company>() {\n  fields = {\n    id: fields.auto(),\n    name: fields.char({ maxLen: 255 }),\n    isActive: fields.bool().default(true)\n  };\n}\n\nexport const User = define('User', {\n  fields: {\n    id: fields.auto(),\n    firstName: fields.char({ maxLen: 255 }),\n    email: fields.text().allowNull(),\n    companyId: fields.foreignKey({\n      relatedTo: () => Company,\n      toField: 'id',\n      relationName: 'company',\n      relatedName: 'usersOfCompany',\n      onDelete: ON_DELETE.CASCADE\n    })\n  }\n});\n\nexport async function createUser(data: InferModel<Company, 'create'>) {\n  await Company.default.set((qs) =>\n    qs\n      .join(User, 'usersOfCompany', (qs) =>\n        qs.data(\n          {\n            firstName: 'Foo',\n            email: 'foo@bar.com'\n          },\n          {\n            firstName: 'John',\n            email: 'john@doe.com'\n          }\n        )\n      )\n      .data({\n        name: 'Evil Foo',\n        isActive: true\n      })\n  );\n}\n",
      "src/core/schemas.ts": "// @ts-nocheck\nimport * as p from '@palmares/schemas';\n\nexport const userSchema = p\n  .object({\n    name: p.string(),\n    age: p.number().omit()\n  })\n  .onSave(async (data) => {\n    console.log(`Saving the user ${data.name} with age ${data.age} to the database`);\n    return data;\n  });\n\nexport async function validateUser(validateData: p.infer<typeof userSchema>) {\n  const validationResp = await userSchema.validate(validateData, {});\n  if (!validationResp.isValid) {\n    throw new Error(`Invalid Data ${validationResp.errors}`);\n  }\n  const data = await validationResp.save();\n\n  console.log('Age is ommited, check the type', data.age);\n  console.log('Just name is returned', data.name);\n}\n",
      "src/core/server.ts": "// @ts-nocheck\nimport { path, Response, middleware } from '@palmares/server';\n\nimport { User } from './database';\nimport { userSchema } from './schemas';\n\nconst companyMiddleware = middleware({\n  request: async (request) => {\n    return request.clone({\n      context: {\n        company: {\n          id: 1\n        }\n      }\n    });\n  }\n});\n\nexport const usersRoute = path('/users')\n  .middlewares([companyMiddleware])\n  .get(async (request) => {\n    const users = await User.default.get((qs) =>\n      qs.where({\n        companyId: request.context.company.id\n      })\n    );\n    return Response.json({ users });\n  })\n  .post(async (request) => {\n    const validationResp = await userSchema.validate((await request.json()) as any, {});\n    if (!validationResp.isValid) {\n      return Response.json(\n        {\n          success: false,\n          errors: validationResp.errors\n        },\n        { status: 400 }\n      );\n    }\n    return Response.json({ success: true, data: await validationResp.save() });\n  })\n  .nested((path) => [\n    path('/<id: number>').get(async (request) => {\n      const user = await User.default.get((qs) => qs.where({ id: request.params.id }));\n      return Response.json({ user: user[0] });\n    })\n  ]);\n",
      "src/core/index.ts": "// @ts-nocheck\nimport { domain } from '@palmares/core';\nimport { dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nimport * as models from './database';\nimport * as migrations from './migrations';\nimport { usersRoute } from './server';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default domain('orders', __dirname, {\n  // eslint-disable-next-line ts/require-await\n  getRoutes: async () => usersRoute,\n  // eslint-disable-next-line ts/require-await\n  getModels: async () => [models.User, models.Company],\n  getTests: () => [__dirname + '/tests.ts'],\n  // eslint-disable-next-line ts/require-await\n  getMigrations: async () => migrations,\n  commands: {\n    seed: {\n      description: 'Seed the database with some data. Used for testing.',\n      keywordArgs: undefined,\n      positionalArgs: undefined,\n      handler: async () => {\n        await models.Company.default.set((qs) =>\n          qs\n            .join(models.User, 'usersOfCompany', (qs) =>\n              qs.data(\n                {\n                  id: 1,\n                  firstName: 'Your mom',\n                  email: 'sobigitdoesntfit@example.com'\n                },\n                {\n                  id: 2,\n                  firstName: 'Your dad',\n                  email: 'missing@example.com'\n                }\n              )\n            )\n            .data({\n              id: 1,\n              name: 'Your family',\n              isActive: true\n            })\n        );\n      }\n    }\n  }\n});\n// @ts-nocheck\n",
      "src/core/tests.ts": "// @ts-nocheck\nimport ExpressServerAdapter from '@palmares/express-adapter';\nimport { getAdapterServer, loadServerWhenTesting } from '@palmares/server';\nimport { beforeAll, describe } from '@palmares/tests';\nimport supertest from 'supertest';\n\nimport type { Http2Server } from 'http2';\n\nbeforeAll(async () => {\n  await loadServerWhenTesting({ port: 4000 });\n});\n\ndescribe('Basic server tests', ({ test }) => {\n  test('test a basic request', async ({ expect }) => {\n    const server = getAdapterServer(ExpressServerAdapter);\n    const response = await supertest(server)\n      .get('/users')\n      .expect(200, {\n        users: [\n          {\n            id: 1,\n            firstName: 'Your mom',\n            email: 'sobigitdoesntfit@example.com'\n          },\n          {\n            id: 2,\n            firstName: 'Your dad',\n            email: 'missing@example.com'\n          }\n        ]\n      });\n    console.log(response.body);\n  });\n});\n",
      "src/core/migrations/index.ts": "export {};\n"
    },
    "formatted": {
      "package.json": {
        "file": {
          "contents": "{\n  \"name\": \"mainpage\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"files\": [\n    \"src\",\n    \"manage.ts\",\n    \"_tsconfig.json\"\n  ],\n  \"scripts\": {\n    \"makemigrations\": \"tsx manage.ts makemigrations\",\n    \"migrate\": \"tsx manage.ts migrate\",\n    \"seed\": \"tsx manage.ts seed\",\n    \"test\": \"tsx --experimental-vm-modules manage.ts test\",\n    \"curl\": \"curl http://localhost:3000/users\",\n    \"setup\": \"npm run makemigrations && npm run migrate && npm run seed\",\n    \"dev\": \"tsx manage.ts runserver\"\n  },\n  \"dependencies\": {\n    \"@palmares/console-logging\": \"*\",\n    \"@palmares/core\": \"*\",\n    \"@palmares/databases\": \"*\",\n    \"@palmares/sequelize-engine\": \"*\",\n    \"@palmares/express-adapter\": \"*\",\n    \"@palmares/logging\": \"*\",\n    \"@palmares/node-std\": \"*\",\n    \"@palmares/schemas\": \"*\",\n    \"@palmares/server\": \"*\",\n    \"@palmares/zod-schema\": \"*\",\n    \"@palmares/jest-tests\": \"*\",\n    \"@palmares/tests\": \"*\",\n    \"sqlite3\": \"^5.1.7\"\n  },\n  \"devDependencies\": {\n    \"@types/supertest\": \"^6.0.2\",\n    \"@types/better-sqlite3\": \"^7.6.12\",\n    \"ts-jest-mock-import-meta\": \"^1.2.1\",\n    \"supertest\": \"^7.0.0\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.7.3\"\n  }\n}"
        }
      },
      "_tsconfig.json": {
        "file": {
          "contents": "{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src/**/*\", \"manage.ts\", \"migrate.ts\"]\n}\n"
        }
      },
      "manage.ts": {
        "file": {
          "contents": "// @ts-nocheck\nimport { Commands } from '@palmares/core';\n\nimport settings from './src/settings';\n\nCommands.handleCommands(settings, process.argv.slice(2));\n"
        }
      },
      "src": {
        "directory": {
          "settings.ts": {
            "file": {
              "contents": "// @ts-nocheck\nimport { ConsoleLogging } from '@palmares/console-logging';\nimport { CoreDomain, defineSettings } from '@palmares/core';\nimport { DatabasesDomain } from '@palmares/databases';\nimport SequelizeEngine from '@palmares/sequelize-engine';\nimport { ExpressServerAdapter } from '@palmares/express-adapter';\nimport { loggingDomain as LoggingDomain } from '@palmares/logging';\nimport { NodeStd } from '@palmares/node-std';\nimport { SchemaDomain } from '@palmares/schemas';\nimport { Response, ServerDomain } from '@palmares/server';\nimport { ZodSchemaAdapter } from '@palmares/zod-schema';\nimport TestsDomain from '@palmares/tests';\nimport JestTestAdapter from '@palmares/jest-tests';\n\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport { join, dirname, resolve } from 'path';\n\nimport mainDomain from './core';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineSettings({\n  basePath: dirname(resolve(__dirname)),\n  settingsLocation: __filename,\n  std: NodeStd,\n  installedDomains: [\n    mainDomain,\n    [\n      LoggingDomain,\n      {\n        logger: ConsoleLogging\n      }\n    ],\n    [\n      CoreDomain,\n      {\n        appName: 'server'\n      }\n    ],\n    // Domain Core, required for palmares to work\n    [\n      ServerDomain,\n      {\n        servers: {\n          default: {\n            server: ExpressServerAdapter,\n            debug: true,\n            port: 3000,\n            validation: {\n              handler: () => {\n                return Response.json({\n                  message: 'query params or url params invalid'\n                });\n              }\n            },\n            handler404: () =>\n              Response.json({\n                status: 404,\n                body: {\n                  message: 'Not found'\n                }\n              }),\n            handler500: async (response: any) => {\n              return response;\n            }\n          }\n        }\n      }\n    ],\n    [\n      SchemaDomain,\n      {\n        schemaAdapter: ZodSchemaAdapter\n      }\n    ],\n    [\n      TestsDomain,\n      {\n        testAdapter: JestTestAdapter.new({\n          config: {\n            extensionsToTreatAsEsm: ['.ts'],\n            transform: {\n              // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n              // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n              '^.+\\\\.ts?$': [\n                'ts-jest',\n                {\n                  tsconfig: join(dirname(resolve(__dirname)), 'tsconfig.json'),\n                  useESM: true,\n                  diagnostics: {\n                    ignoreCodes: [1343]\n                  },\n                  astTransformers: {\n                    before: [\n                      {\n                        path: '../../node_modules/ts-jest-mock-import-meta',\n                        options: {\n                          metaObjectReplacement: {\n                            filename: __filename,\n                            dirname: __dirname,\n                            url: pathToFileURL(__filename)\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        })\n      }\n    ],\n    [\n      DatabasesDomain,\n      {\n        databases: {\n          default: {\n            engine: SequelizeEngine.new({\n              dialect: 'sqlite',\n              storage: './sequelize.sqlite3'\n            })\n          }\n        }\n      }\n    ]\n  ]\n});\n"
            }
          },
          "core": {
            "directory": {
              "database.ts": {
                "file": {
                  "contents": "// @ts-nocheck\nimport { define, fields, Model, ON_DELETE, InferModel } from '@palmares/databases';\n\nexport class Company extends Model<Company>() {\n  fields = {\n    id: fields.auto(),\n    name: fields.char({ maxLen: 255 }),\n    isActive: fields.bool().default(true)\n  };\n}\n\nexport const User = define('User', {\n  fields: {\n    id: fields.auto(),\n    firstName: fields.char({ maxLen: 255 }),\n    email: fields.text().allowNull(),\n    companyId: fields.foreignKey({\n      relatedTo: () => Company,\n      toField: 'id',\n      relationName: 'company',\n      relatedName: 'usersOfCompany',\n      onDelete: ON_DELETE.CASCADE\n    })\n  }\n});\n\nexport async function createUser(data: InferModel<Company, 'create'>) {\n  await Company.default.set((qs) =>\n    qs\n      .join(User, 'usersOfCompany', (qs) =>\n        qs.data(\n          {\n            firstName: 'Foo',\n            email: 'foo@bar.com'\n          },\n          {\n            firstName: 'John',\n            email: 'john@doe.com'\n          }\n        )\n      )\n      .data({\n        name: 'Evil Foo',\n        isActive: true\n      })\n  );\n}\n"
                }
              },
              "schemas.ts": {
                "file": {
                  "contents": "// @ts-nocheck\nimport * as p from '@palmares/schemas';\n\nexport const userSchema = p\n  .object({\n    name: p.string(),\n    age: p.number().omit()\n  })\n  .onSave(async (data) => {\n    console.log(`Saving the user ${data.name} with age ${data.age} to the database`);\n    return data;\n  });\n\nexport async function validateUser(validateData: p.infer<typeof userSchema>) {\n  const validationResp = await userSchema.validate(validateData, {});\n  if (!validationResp.isValid) {\n    throw new Error(`Invalid Data ${validationResp.errors}`);\n  }\n  const data = await validationResp.save();\n\n  console.log('Age is ommited, check the type', data.age);\n  console.log('Just name is returned', data.name);\n}\n"
                }
              },
              "server.ts": {
                "file": {
                  "contents": "// @ts-nocheck\nimport { path, Response, middleware } from '@palmares/server';\n\nimport { User } from './database';\nimport { userSchema } from './schemas';\n\nconst companyMiddleware = middleware({\n  request: async (request) => {\n    return request.clone({\n      context: {\n        company: {\n          id: 1\n        }\n      }\n    });\n  }\n});\n\nexport const usersRoute = path('/users')\n  .middlewares([companyMiddleware])\n  .get(async (request) => {\n    const users = await User.default.get((qs) =>\n      qs.where({\n        companyId: request.context.company.id\n      })\n    );\n    return Response.json({ users });\n  })\n  .post(async (request) => {\n    const validationResp = await userSchema.validate((await request.json()) as any, {});\n    if (!validationResp.isValid) {\n      return Response.json(\n        {\n          success: false,\n          errors: validationResp.errors\n        },\n        { status: 400 }\n      );\n    }\n    return Response.json({ success: true, data: await validationResp.save() });\n  })\n  .nested((path) => [\n    path('/<id: number>').get(async (request) => {\n      const user = await User.default.get((qs) => qs.where({ id: request.params.id }));\n      return Response.json({ user: user[0] });\n    })\n  ]);\n"
                }
              },
              "index.ts": {
                "file": {
                  "contents": "// @ts-nocheck\nimport { domain } from '@palmares/core';\nimport { dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nimport * as models from './database';\nimport * as migrations from './migrations';\nimport { usersRoute } from './server';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default domain('orders', __dirname, {\n  // eslint-disable-next-line ts/require-await\n  getRoutes: async () => usersRoute,\n  // eslint-disable-next-line ts/require-await\n  getModels: async () => [models.User, models.Company],\n  getTests: () => [__dirname + '/tests.ts'],\n  // eslint-disable-next-line ts/require-await\n  getMigrations: async () => migrations,\n  commands: {\n    seed: {\n      description: 'Seed the database with some data. Used for testing.',\n      keywordArgs: undefined,\n      positionalArgs: undefined,\n      handler: async () => {\n        await models.Company.default.set((qs) =>\n          qs\n            .join(models.User, 'usersOfCompany', (qs) =>\n              qs.data(\n                {\n                  id: 1,\n                  firstName: 'Your mom',\n                  email: 'sobigitdoesntfit@example.com'\n                },\n                {\n                  id: 2,\n                  firstName: 'Your dad',\n                  email: 'missing@example.com'\n                }\n              )\n            )\n            .data({\n              id: 1,\n              name: 'Your family',\n              isActive: true\n            })\n        );\n      }\n    }\n  }\n});\n// @ts-nocheck\n"
                }
              },
              "tests.ts": {
                "file": {
                  "contents": "// @ts-nocheck\nimport ExpressServerAdapter from '@palmares/express-adapter';\nimport { getAdapterServer, loadServerWhenTesting } from '@palmares/server';\nimport { beforeAll, describe } from '@palmares/tests';\nimport supertest from 'supertest';\n\nimport type { Http2Server } from 'http2';\n\nbeforeAll(async () => {\n  await loadServerWhenTesting({ port: 4000 });\n});\n\ndescribe('Basic server tests', ({ test }) => {\n  test('test a basic request', async ({ expect }) => {\n    const server = getAdapterServer(ExpressServerAdapter);\n    const response = await supertest(server)\n      .get('/users')\n      .expect(200, {\n        users: [\n          {\n            id: 1,\n            firstName: 'Your mom',\n            email: 'sobigitdoesntfit@example.com'\n          },\n          {\n            id: 2,\n            firstName: 'Your dad',\n            email: 'missing@example.com'\n          }\n        ]\n      });\n    console.log(response.body);\n  });\n});\n"
                }
              },
              "migrations": {
                "directory": {
                  "index.ts": {
                    "file": {
                      "contents": "export {};\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}